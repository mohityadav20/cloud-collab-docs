# GraphQL Schema for Collaborative Document Management System
# Uses AppSync with DynamoDB resolvers

type Document @model @auth(rules: [{ allow: owner }, { allow: private, operations: [read] }]) {
  id: ID!
  title: String!
  content: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String! # Cognito username
  ownerEmail: String!
  # Shares relationship
  shares: [Share!] @connection(keyName: "byDocument", fields: ["id"])
}

# Granular permissions: READ or WRITE
enum Permission {
  READ
  WRITE
}

type Share @model @auth(rules: [{ allow: owner }, { allow: private, operations: [read] }]) {
  id: ID!
  documentId: ID! @index(name: "byDocument", sortKeyFields: ["sharedWith"])
  document: Document @belongsTo(fields: ["documentId"])
  sharedWith: String! # Username or email
  sharedWithEmail: String!
  permission: Permission! # READ or WRITE
  sharedBy: String! # Cognito username
  sharedAt: AWSDateTime!
}

# User profile for better UX (username, email, avatar)
type UserProfile @model @auth(rules: [{ allow: owner }, { allow: private, operations: [read] }]) {
  id: ID! # Cognito username
  email: String! @index(name: "byEmail")
  username: String
  avatarUrl: String # S3 URL
  createdAt: AWSDateTime!
}

# Real-time presence tracking (who's viewing/editing a document)
type DocumentPresence @model @auth(rules: [{ allow: private }]) {
  id: ID!
  documentId: ID! @index(name: "byDocument")
  userId: String!
  username: String
  lastSeen: AWSDateTime!
}

# Subscription for real-time document updates
type Subscription {
  onUpdateDocument(documentId: ID!): Document
    @aws_subscribe(mutations: ["updateDocument"])
  onCreateShare(documentId: ID!): Share
    @aws_subscribe(mutations: ["createShare"])
  onUpdateShare(documentId: ID!): Share
    @aws_subscribe(mutations: ["updateShare"])
  onDeleteShare(documentId: ID!): Share
    @aws_subscribe(mutations: ["deleteShare"])
  onDocumentPresenceChanged(documentId: ID!): DocumentPresence
    @aws_subscribe(mutations: ["createDocumentPresence", "updateDocumentPresence"])
}

# Custom mutations for bulk operations
input CreateDocumentInput {
  title: String!
  content: String
  ownerEmail: String!
}

input UpdateDocumentInput {
  id: ID!
  title: String
  content: String
}

input ShareDocumentInput {
  documentId: ID!
  sharedWith: String!
  sharedWithEmail: String!
  permission: Permission!
}

# Queries with custom authorization
type Query {
  # Get documents shared with current user
  documentsSharedWithMe: [Document!] @aws_cognito_user_pools
  # Get user profile by email (for invitations)
  getUserProfileByEmail(email: String!): UserProfile
    @aws_cognito_user_pools
}

