# GraphQL Schema for Collaborative Document Management System
# Simplified version compatible with GraphQL Transformer v1
# Uses AppSync with DynamoDB resolvers

type Document @model @auth(rules: [{ allow: owner, ownerField: "owner" }, { allow: private, operations: [read] }]) {
  id: ID!
  title: String!
  content: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String! # Cognito username - auto-populated by @auth
  ownerEmail: String!
}

# Granular permissions: READ or WRITE
enum Permission {
  READ
  WRITE
}

type Share @model @auth(rules: [{ allow: owner }, { allow: private, operations: [read] }]) {
  id: ID!
  documentId: ID!
  sharedWith: String! # Username or email
  sharedWithEmail: String!
  permission: Permission! # READ or WRITE
  sharedBy: String! # Cognito username
  sharedAt: AWSDateTime!
}

# User profile for better UX (username, email, avatar)
type UserProfile @model @auth(rules: [{ allow: owner }, { allow: private, operations: [read] }]) {
  id: ID! # Cognito username
  email: String!
  username: String
  avatarUrl: String # S3 URL
  createdAt: AWSDateTime!
}

# Real-time presence tracking (who's viewing/editing a document)
type DocumentPresence @model @auth(rules: [{ allow: private }]) {
  id: ID!
  documentId: ID!
  userId: String!
  username: String
  lastSeen: AWSDateTime!
}

# Note: Subscriptions are auto-generated by @model directive
# You can use:
# - onCreateDocument, onUpdateDocument, onDeleteDocument
# - onCreateShare, onUpdateShare, onDeleteShare
# - etc. for all @model types

# Note: CreateDocumentInput, UpdateDocumentInput, etc. are auto-generated by @model
# They include all fields except those auto-populated by @auth (like 'owner')

# Queries with custom authorization
type Query {
  # Get user profile by email (for invitations)
  getUserProfileByEmail(email: String!): UserProfile
    @aws_cognito_user_pools
}
